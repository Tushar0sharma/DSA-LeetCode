class Solution {
    public int find(int []par,int p){
        if(par[p]==p) return p;
        return par[p]=find(par,par[p]);
    }
    public void union(int []par,int[]size,int u,int v){
        int pu=find(par,u);
        int pv=find(par,v);
        if(pv==pu) return;
        if(size[pu]>size[pv]){
            par[pv]=pu;
            size[pu]+=size[pv];
        }
        else{
            par[pu]=pv;
            size[pv]+=size[pu];
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        int []par=new int[n];
        int []size=new int[n];
        for(int i=0;i<n;i++){
            par[i]=i;
            size[i]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1) union(par,size,i,j);
            }
        }
        int []same=new int[n];
        for(int i:initial){
            int x=find(par,i);
            same[x]++;
        }
        int ans=Integer.MAX_VALUE;
        int max=-1;
        for(int i:initial){
            int x=find(par,i);
            if(same[x]==1 && size[x]>=max){
                if(max==size[x]) ans=Math.min(i,ans);
                else ans=i;
                max=Math.max(size[x],max);
            }
        }
        if(ans==Integer.MAX_VALUE) for(int i:initial) ans=Math.min(ans,i);
        
        return ans;
    }
}