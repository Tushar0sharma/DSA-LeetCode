class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        int []par=new int[n];
        int []size=new int[n];
        for(int i=0;i<n;i++){
            par[i]=i;
            size[i]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1)
                    union(i,j,par,size);
            }
        }
        int []same=new int[n];
        for(int i:initial){
            same[par[i]]++;
        }
        int max=Integer.MIN_VALUE;
        int ans=Integer.MAX_VALUE;

        for(int i:initial){
            if(same[par[i]]==1 && size[par[i]]>=max){
                if(size[par[i]]==max) ans=Math.min(i,ans);
                else{
                    max=size[par[i]];
                    ans=i;
                }
            }
        }
        if(ans==Integer.MAX_VALUE){
            for(int i:initial) ans=Math.min(i,ans);
        }
        return ans;
    }
    public int find(int p,int []par){
        if(par[p]==p) return p;
        return par[p]=find(par[p],par);
    }
    public void union(int u,int v,int []par,int []size){
        int pu=find(u,par);
        int pv=find(v,par);
        if(pu==pv) return ;
        if(size[pu]>size[pv]){
            par[pv]=pu;
            size[pu]+=size[pv];
        }
        else{
            par[pu]=pv;
            size[pv]+=size[pu];
        }
    }
}